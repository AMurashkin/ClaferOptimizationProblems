/*************** Reference_Model ***************/ 

abstract System 
  cost -> integer 
  mass -> integer 
  warrantyCost -> integer 
abstract FeatureModel 
abstract Architecture 
abstract FunctionalAnalysis 
abstract HardwareArchitecture 
  totalMass -> integer 
  totalCost -> integer 
  totalWarrantyCost -> integer 
abstract DeviceNodeClassification 
  totalCost -> integer 
  totalMass -> integer 
  totalWarrantyCost -> integer 
abstract CommTopology 
  totalMass -> integer 
  totalCost -> integer 
abstract PowerTopology 
  totalMass -> integer 
  totalCost -> integer 
abstract Deployment 

abstract Feature 

abstract FunctionalAnalysisComponent 
  deployedTo -> DeviceNode 
  xor implementation 
    hardware 
      [deployedTo.type in (EEDeviceNode , SmartDeviceNode)]
    software 
      [deployedTo.type in SmartDeviceNode]


abstract AnalysisFunction : FunctionalAnalysisComponent 
  [deployedTo.type in SmartDeviceNode]
  latency -> integer 
  baseLatency -> integer 

abstract FunctionalDevice : FunctionalAnalysisComponent 
  [deployedTo.type in (SmartDeviceNode , EEDeviceNode)]
  latency -> integer 

abstract FunctionConnector 
  sender -> FunctionalAnalysisComponent 
  receiver -> FunctionalAnalysisComponent 
  deployedTo -> HardwareDataConnector ? 
    [this.parent in this.deployedFrom]
    [(sender.deployedTo.dref , receiver.deployedTo.dref) in (deployedTo.endpoint.dref)]
  [(sender.deployedTo.dref = receiver.deployedTo.dref) <=> no(this.deployedTo)]


  messageSize -> integer 
  latency -> integer 
enum DeviceNodeType = SmartDeviceNode | EEDeviceNode | PowerDeviceNode
abstract DeviceNode 
  type -> DeviceNodeType 
  mass -> integer 
  cost -> integer 
  warrantyCost -> integer 
  replaceCost -> integer 
  ppm -> integer 
  speedFactor -> integer 

abstract HardwareConnector 
  mass -> integer 
  cost -> integer 
  length -> integer 

abstract PowerConnector : HardwareConnector 
  source -> DeviceNode 
  sink -> DeviceNode 

abstract LoadPowerConnector : PowerConnector 
abstract DevicePowerConnector : PowerConnector 

abstract HardwareDataConnector : HardwareConnector 
  endpoint -> DeviceNode 2..* 
  deployedFrom -> FunctionConnector 1..* 
    [this.deployedTo = this.parent]
  transferTimePerSize -> integer 

abstract DiscreteDataConnector : HardwareDataConnector 
abstract AnalogDataConnector : HardwareDataConnector 

abstract BusConnector : HardwareDataConnector 
  [all e : endpoint | e.type = SmartDeviceNode]
  xor type 
    LowSpeedCAN 
    HighSpeedCAN 
    LIN 
    FlexRay 

abstract LogicalBusBridge : HardwareDataConnector 
  bus -> BusConnector 2..2 
  [all e : this.endpoint | e.type = SmartDeviceNode]

// Automotive Concepts [TODO] 
abstract ECU : DeviceNode 
abstract Switch : DeviceNode 
abstract Motor : DeviceNode 
abstract Inline : DeviceNode 
  abstract Pin : DeviceNode 
// End Automotive Concepts 

/*************** End Reference_Model ***************/ 

/*************** DriverWinSysFAA ***************/ 

abstract DriverWinSysFAA : FunctionalAnalysis 
  WinSwitch : FunctionalDevice 
    [this.latency = 20]
    [this.implementation.hardware]
  WinArbiter : AnalysisFunction 
    [this.baseLatency = 1]
    [this.latency = this.baseLatency * this.deployedTo.dref.speedFactor]
    [this.implementation.hardware || this.implementation.software]
  WinControl : AnalysisFunction 
    [this.baseLatency = 2]
    [this.latency = this.baseLatency * this.deployedTo.dref.speedFactor]
    [this.implementation.software]
  WinMotor : FunctionalDevice 
    [this.latency = 10]
    [this.implementation.hardware]
  CurrentSensor : FunctionalDevice 
    [this.latency = 5]
    [this.implementation.hardware]
  localWinReq : FunctionConnector 
    [this.messageSize = 1]
    [this.latency = (if (some(this.deployedTo.dref)) then (this.messageSize * this.deployedTo.dref.transferTimePerSize) else (0))]
    [this.sender = WinSwitch && this.receiver = WinArbiter]
  winReq : FunctionConnector 
    [this.messageSize = 1]
    [this.latency = (if (some(this.deployedTo.dref)) then (this.messageSize * this.deployedTo.dref.transferTimePerSize) else (0))]
    [this.sender = WinArbiter && this.receiver = WinControl]
  winCmd : FunctionConnector 
    [this.messageSize = 2]
    [this.latency = (if (some(this.deployedTo.dref)) then (this.messageSize * this.deployedTo.dref.transferTimePerSize) else (0))]
    [this.sender = WinControl && this.receiver = WinMotor]
  current : FunctionConnector 
    [this.messageSize = 1]
    [this.latency = (if (some(this.deployedTo.dref)) then (this.messageSize * this.deployedTo.dref.transferTimePerSize) else (0))]
    [this.sender = CurrentSensor && this.receiver = WinControl]

  PinchDetectionFA : FunctionalAnalysis ? 
    PinchDetection : AnalysisFunction 
      [this.baseLatency = 2]
      [this.latency = this.baseLatency * this.deployedTo.dref.speedFactor]
      [this.implementation.software]
    PositionSensor : FunctionalDevice 
      [this.latency = 10]
      [this.implementation.hardware]
    position : FunctionConnector 
      [this.messageSize = 1]
      [this.latency = (if (some(this.deployedTo.dref)) then (this.messageSize * this.deployedTo.dref.transferTimePerSize) else (0))]
      [this.sender = PositionSensor && this.receiver = PinchDetection]
    object : FunctionConnector 
      [this.messageSize = 2]
      [this.latency = (if (some(this.deployedTo.dref)) then (this.messageSize * this.deployedTo.dref.transferTimePerSize) else (0))]
      [this.sender = PinchDetection && this.receiver = WinControl]
  [PinchDetectionFA <=> DriverWinSysFM.expressDown.expressUp]

/*************** End DriverWinSysFAA ***************/ 

/*************** DriverWinSysFM ***************/ 

abstract DriverWinSysFM : FeatureModel 
  basic : Feature 
  expressDown : Feature ? 
    expressUp : Feature ? 

/*************** End DriverWinSysFM ***************/ 

