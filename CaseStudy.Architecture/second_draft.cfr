abstract Component

abstract Flow
    start -> SoftwareComponent
    end -> SoftwareComponent
    rate ->> integer
    bus -> Bus ? // the bus that implements the flow
    [bus => (this in bus.flows)]

// =====================================================================
// Primitive types: SoftwareComponent, HardwareComponent and Bus
// =====================================================================

abstract SoftwareComponent: Component
    target -> HardwareComponent  // hardware this software component is mapped to
    [this in target.software]  // inverse relationship constraint

abstract HardwareComponent: Component
    software -> SoftwareComponent* // the software it contains
        [this.target = HardwareComponent] // inverse relationship constraint

    mappable?
    [no mappable => no software]
    cost ->> integer // every hardware component has a cost

emptyHardwareSet -> HardwareComponent 0

abstract Bus : HardwareComponent
    [no mappable]
    capacity ->> integer
    flows -> Flow* // an inverse sowing what flows the bus implements
        [this.bus = Bus]  // inverse relationship constraint

    components -> HardwareComponent* // the components the bus connects
    [components = if (#flows > 0) then (flows.start.target ++ flows.end.target) else emptyHardwareSet ]

    [(sum flows.rate) <= capacity] // bus capacity constraint

abstract SoftwareTopology: Component
    flows -> Flow*
        [( this.bus <=> (this.start.target.ref != this.end.target.ref))] // located on the same ECU, and there is no bus
        [this.bus => (this.start.target in this.bus.components) && (this.end.target in this.bus.components)]

//=============================================
// Custom types
//=============================================

abstract ECU : HardwareComponent
    [mappable]

abstract Device : HardwareComponent

abstract NormalSensor : Device
    [no mappable]

abstract SmartSensor : Device
    [mappable]

//----------------------------------------------

abstract SoftwareControl : SoftwareComponent
    ram ->> integer

abstract ECUWithRAM : ECU
    ram ->> integer

    ramSoftware -> SoftwareControl*
    [all s : SoftwareControl | (s in software) <=> (s in ramSoftware)]

    [(sum ramSoftware.ram) <= ram]

//==================================
// Concrete instances
//==================================

// Hardware: 

DoorController : ECUWithRAM
    [ram = 16]
    [cost = 8]

AnotherDoorController : ECUWithRAM
    [ram = 12]
    [cost = 6]

SmartDoorSensor : SmartSensor
    [cost = 5]

LINBus : Bus
    [cost = 2]
    [capacity = 16]

// Software: 

RequiredSoftwareTopology: SoftwareTopology

    DoorSensorSoftware: SoftwareComponent
        [target = SmartDoorSensor]
    
    PowerWindowControl: SoftwareControl
        [target in ECU]
        [ram = 8]
    
    PowerWindowControlCoordinator: SoftwareControl
        [target in ECU]
        [ram = 8]

    flowFromSensorToPWControl : Flow
        [start = DoorSensorSoftware]
        [end = PowerWindowControl]
        [rate = 8]

    flowFromPWControlToPWControlCoordinator : Flow
        [start = PowerWindowControl]
        [end = PowerWindowControlCoordinator]
        [rate = 8]

    [flows = flowFromSensorToPWControl, flowFromPWControlToPWControlCoordinator]
