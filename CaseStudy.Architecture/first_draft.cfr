abstract Component

abstract CommunicationUnit
    start -> Component
    end -> Component
    rate ->> integer
    bus -> Bus ?
    [bus => (this in bus.links)]

// =====================================================================
// Primitive types: SoftwareComponent, HardwareComponent and Bus
// =====================================================================

abstract SoftwareComponent: Component
    target -> HardwareComponent  // hardware this software component is mapped to
    [this in target.software]  // inverse relationship constraint
    communication -> CommunicationUnit*
        [this.start = SoftwareComponent]

abstract HardwareComponent: Component
    software -> SoftwareComponent* // the software it contains
        [this.target = HardwareComponent] // inverse relationship constraint

    mappable?
    [no mappable => no software]
    cost ->> integer // every hardware component has a cost

abstract Bus : HardwareComponent
    [no mappable]
    capacity ->> integer
    links ->> CommunicationUnit
        [this.bus = Bus] // inverse relationship constraint

//=============================================
// Custom types
//=============================================

abstract ECU : HardwareComponent
    [mappable]

abstract Device : HardwareComponent

abstract NormalSensor : Device
    [no mappable]

abstract SmartSensor : Device
    [mappable]

//----------------------------------------------

abstract SoftwareControl : SoftwareComponent
    ram ->> integer

abstract ECUWithRAM : ECU
    ram ->> integer

//==================================
// Concrete instances
//==================================

// Hardware: 

DoorController : ECUWithRAM
    [ram = 16]
    [cost = 8]

DoorController2 : ECUWithRAM
    [ram = 32]
    [cost = 10]

SmartDoorSensor : SmartSensor
    [cost = 5]

LINBus : Bus
    [cost = 2]
    [capacity = 10]

// Software: 

DoorSensorSoftware: SoftwareComponent
    linkToControl : CommunicationUnit
        [end = PowerWindowControl]
        [rate = 8]
    [communication = linkToControl]
    [target = SmartDoorSensor]

PowerWindowControl: SoftwareControl
    [target in ECU]
    typecastedTarget -> ECUWithRAM
    [typecastedTarget = target]
    [this.ram <= typecastedTarget.ram]
    [ram = 16]

[all b : Bus | (sum b.links.rate) <= b.capacity] // bus capacity constraint
[all c : SoftwareComponent | all link: c.communication | 
    (link.end.target = target) || (link.bus && ____)] 

// link constraint: all communicating software components are either:
// 1) located on the same ECU
// 2) or communicating through a bus